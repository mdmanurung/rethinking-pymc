[
  {
    "objectID": "chapters/chapter_02.html",
    "href": "chapters/chapter_02.html",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "",
    "text": "Chapter 2\nThis is a test post."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "",
    "text": "version 0.0.1 | Mikhael D. Manurung | 2022-10-26\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/chapter_02.html",
    "href": "exercises/chapter_02.html",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "",
    "text": "import arviz as az\nimport numpy as np\nimport pymc as pm\n\nfrom matplotlib import pylab as plt\nfrom scipy import stats\n\n\nRANDOM_SEED = 8927\nnp.random.seed(RANDOM_SEED)\n\n\n# express the above scenarios as the number of waters in each\nW = np.array([3, 3, 5])\n# give the total number of trials\nTotal = np.array([3, 4, 7])\n\n\n# Get the plots for each scenario, trying different numbers of grid points for each\nfor i, j, k in zip(W, Total, range(3)):\n    for n in np.linspace(10, 100, 10):\n        # get the grid of parameter values\n        p = np.linspace(0, 1, int(n))\n        # compute the likelihood for each value of p, assuming 6 success and 3 fails\n        likelihood = stats.binom.pmf(k=i, n=j, p=p)\n        # prior is unif(0,1)\n        prior = 1\n        # posterior\n        post = likelihood * prior\n        # normalise the posterior\n        post = post / np.sum(post)\n        plt.plot(p, post, label=str(n) + \" grid points\")\n\n    plt.title(\"Observation \" + str(k + 1))\n    plt.xlabel(\"Parameter value - p\")\n    plt.ylabel(\"Posterior probability\")\n    plt.legend()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html\n\narray([3, 4, 7])\n\n\n\nfig, axs = plt.subplots(1, 3, figsize=(20,3))\n\nfor i, j, ax, ix in zip(W, Total, np.ravel(axs), range(3)):\n    p = np.linspace(0, 1, 20)\n    # compute the likelihood for each value of p, assuming 6 success and 3 fails\n    likelihood = stats.binom.pmf(k=i, n=j, p=p)\n    # prior is step function\n    prior = np.heaviside(p - 0.5, 0.5) * 2\n    # posterior\n    post = likelihood * prior\n    # normalise the posterior\n    post = post / np.sum(post)\n    ax.plot(p, post, label=str(n) + \" grid points\")\n    ax.scatter(p, post, label=str(n) + \" grid points\")\n    ax.set_title(\"Observation \" + str(ix + 1))\n    ax.set(xlabel=\"P\", ylabel=\"Posterior Probability\")\n\nfor ax in axs.flat:\n    ax.label_outer()"
  }
]