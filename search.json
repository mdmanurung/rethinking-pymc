[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "chapters/chapter_02.html",
    "href": "chapters/chapter_02.html",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "",
    "text": "import arviz as az\nimport pymc as pm\nimport scipy.stats as stats\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nSEED = 42\nrng = np.random.default_rng(SEED)\n\nCode 2.1\n\nways = np.array([0, 3, 8, 9, 0])\nways / ways.sum()\n\narray([0.  , 0.15, 0.4 , 0.45, 0.  ])\n\n\nCode 2.2\n\nstats.binom.pmf(6, n=9, p=0.5)\n\n0.16406250000000003\n\n\nCode 2.3 and 2.4\n\ndef uniform_prior(grid_points):\n    return np.repeat(5, grid_points)\n\n\ndef truncated_prior(grid_points, trunc_point=0.5):\n    return (np.linspace(0, 1, grid_points) >= trunc_point).astype(int)\n\n\ndef double_exp_prior(grid_points):\n    return np.exp(-5 * abs(np.linspace(0, 1, grid_points) - 0.5))\n\n\ndef binom_post_grid_approx(prior, grid_points=5, success=6, tosses=9):\n    # define grid\n    p_grid = np.linspace(0, 1, grid_points)\n\n    # define prior\n    prior = prior(grid_points)\n\n    # compute likelihood at each point in the grid\n    likelihood = stats.binom.pmf(success, tosses, p_grid)\n\n    # compute product of likelihood and prior\n    unstd_posterior = likelihood * prior\n\n    # standardize the posterior, so it sums to 1\n    posterior = unstd_posterior / unstd_posterior.sum()\n    return p_grid, posterior\n\n\nw, n = 6, 9\n\npoints = (5, 20, 100)\n\n_, ax = plt.subplots(1, len(points), figsize=(6 * len(points), 5))\nfor idx, ps in enumerate(points):\n    p_grid, posterior = binom_post_grid_approx(uniform_prior, ps, w, n)\n    ax[idx].plot(p_grid, posterior, \"o-\", label=f\"successes = {w}\\ntosses = {n}\")\n    ax[idx].set_xlabel(\"probability of water\")\n    ax[idx].set_ylabel(\"posterior probability\")\n    ax[idx].set_title(f\"{ps} points\")\n    ax[idx].legend(loc=0)\n\n\n\n\n\n_, ax = plt.subplots(1, len(points), figsize=(6 * len(points), 5))\nfor idx, ps in enumerate(points):\n    p_grid, posterior = binom_post_grid_approx(truncated_prior, ps, w, n)\n    ax[idx].plot(p_grid, posterior, \"o-\", label=f\"successes = {w}\\ntosses = {n}\")\n    ax[idx].set_xlabel(\"probability of water\")\n    ax[idx].set_ylabel(\"posterior probability\")\n    ax[idx].set_title(f\"{ps} points\")\n    ax[idx].legend(loc=0)\n\n\n\n\n\n_, ax = plt.subplots(1, len(points), figsize=(6 * len(points), 5))\nfor idx, ps in enumerate(points):\n    p_grid, posterior = binom_post_grid_approx(double_exp_prior, ps, w, n)\n    ax[idx].plot(p_grid, posterior, \"o-\", label=f\"successes = {w}\\ntosses = {n}\")\n    ax[idx].set_xlabel(\"probability of water\")\n    ax[idx].set_ylabel(\"posterior probability\")\n    ax[idx].set_title(f\"{ps} points\")\n    ax[idx].legend(loc=0)\n\n\n\n\nCode 2.5\n\n\nQuadratic approximation (quap). Code taken from Ravin Kumar’s cheatsheet.\n\ndata = np.repeat((0, 1), (3, 6))\ndata\n\narray([0, 0, 0, 1, 1, 1, 1, 1, 1])\n\n\n\nwith pm.Model() as normal_approximation:\n    # prior\n    p = pm.Uniform(\"p\", 0, 1) \n    # likelihood\n    w = pm.Binomial(\"w\", n=len(data), p=p, observed=data.sum())\n    # inference\n    mean_q = pm.find_MAP() # mean\n    std_q = ((1/pm.find_hessian(mean_q, vars=[p]))**0.5)[0] # variance\n\nprint(\"Mean, Standard deviation\\np {:.2}, {:.2}\".format(mean_q[\"p\"], std_q[0]))\n\n\n\n\n\n\n    \n      \n      100.00% [6/6 00:00<00:00 logp = -1.8075, ||grad|| = 1.5]\n    \n    \n\n\n\nMean, Standard deviation\np 0.67, 0.64\n\n\n\n# Compute the 89% percentile interval\nnorm = stats.norm(mean_q, std_q)\nprob = 0.89\nz = stats.norm.ppf([(1 - prob) / 2, (1 + prob) / 2])\npi = mean_q[\"prior\"] + std_q * z\nprint(\"5.5%, 94.5% \\n{:.2}, {:.2}\".format(pi[0], pi[1]))\n\n5.5%, 94.5% \n0.42, 0.58\n\n\n\n\n\n\nw, n = 6, 9\nx = np.linspace(0, 1, 100)\nplt.plot(x, stats.beta.pdf(x , w+1, n-w+1),\n         label='True posterior')\n\n# quadratic approximation\nplt.plot(x, stats.norm.pdf(x, mean_q['prior'], std_q),\n         label='Quadratic approximation')\nplt.legend(loc=0, fontsize=9)\n\nplt.title('n = {}'.format(n), fontsize=14)\nplt.xlabel('Proportion water', fontsize=14)\nplt.ylabel('Density', fontsize=14);\n\n#TODO: something's wrong here"
  },
  {
    "objectID": "exercises/chapter_02.html",
    "href": "exercises/chapter_02.html",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "",
    "text": "import arviz as az\nimport numpy as np\nimport pymc as pm\n\nfrom matplotlib import pylab as plt\nfrom scipy import stats\n\nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)\n\n\n\n\n\nWhich of the expressions below correspond to the statement: the probability of rain on Monday?\n\nPr(rain)\nPr(rain|Monday)\nPr(Monday|rain)\nPr(rain, Monday) / Pr(Monday)\n\nAnswer:\n\nOption 2, Pr(rain|Monday): reads as “the probability of rain, given that the day is Monday”.\nOption 4, this is Bayes theorem in action! If you solve it then you will get Pr(rain|Monday) as well.\n\n\n\n\nWhich of the follwoing statements correspond to the expression:\\(Pr(Monday|rain)\\)?\n\nThe probability of rain on Monday\nThe probability of rain, given that it is Monday\nThe probability that it is Monday, given that it is raining\nThe probability that it is Monday and that it is raining\n\nAnswer:\n\nOption 3, The probability that it is Monday, given that it is raining\nOption 1 and 2: Pr(rain|Monday)\nOption 4: Pr(rain, Monday)\n\n\n\n\nWhich of the expressions below correspond to the statement: the probability that it is Monday, given that it is raining?\n\nPr(Monday|rain)\nPr(rain|Monday)\nPr(rain|Monday) Pr(Monday)\nPr(rain|Monday) Pr(Monday)/ Pr(rain)\nPr(Monday|rain) Pr(rain)/ Pr(Monday)\n\nAnswer:\n\nOption 1\nOption 4\n\n\n\n\nThe Bayesian statistician Bruno de Finetti (1906–1985) began his 1973 book on probability theory with the declaration: “PROBABILITY DOES NOT EXIST.” The capitals appeared in the original, so I imagine de Finetti wanted us to shout this statement. What he meant is that probability is a device for describing uncertainty from the perspective of an observer with limited knowledge; it has no objective reality. Discuss the globe tossing example from the chapter, in light of this statement. What does it mean to say “the probability of water is 0.7”?\nAnswer:\nProbability quantifies our belief regarding a particular situation, not an objective claim of truth. So, saying that the probability of water on Earth is 0.7 means that if we randomly point a surface of a globe then we will get, for example, 7 water out of 10 trials. However, the probability may change upon seeing new data/samples.\n\n\n\n\n\n\nRecall the globe tossing model from the chapter. Compute and plot the grid approximate posterior distribution for each of the following sets of observations. In each case, assume a uniform prior for p.\n\nW, W, W\nW, W, W, L\nL, W, W, L, W, W, W\n\nAnswer:\n\n# count the number of waters in each toss\nwater = np.array([3, 3, 5])\n\n# total number of trials\ntrials = np.array([3, 4, 7])\n\n\nfig, axs = plt.subplots(1, 3, figsize=(12,4))\n\nfor w, t, ax, ix in zip(water, trials, np.ravel(axs), range(3)):\n    # parameter grid\n    p_grid = np.linspace(0, 1, 20)\n\n    # compute the likelihood for each value of p, assuming 6 success and 3 fails\n    likelihood = stats.binom.pmf(k=w, n=t, p=p_grid)\n    \n    # uniform prior\n    prior = 1\n    \n    # posterior\n    post = likelihood * prior\n    \n    # normalise the posterior\n    post = post / np.sum(post)\n    \n    # plot\n    ax.plot(p_grid, post)\n    ax.scatter(p_grid, post)\n    ax.set_title(f\"{w} Water / {t} Trials\")\n    ax.set(xlabel=\"P\", ylabel=\"Posterior Probability\")\n\nfor ax in axs.flat:\n    ax.label_outer()\n\n\n\n\n\n\n\nNow assume a prior for p that is equal to zero when p < 0.5 and is a positive constant when p ≥ 0.5. Again compute and plot the grid approximate posterior distribution for each of the sets of observations in the problem just above.\nAnswer:\n\nfig, axs = plt.subplots(1, 3, figsize=(12,4))\n\nfor w, t, ax, ix in zip(water, trials, np.ravel(axs), range(3)):\n    p_grid = np.linspace(0, 1, 20)\n\n    # compute the likelihood for each value of p, assuming 6 success and 3 fails\n    likelihood = stats.binom.pmf(k=w, n=t, p=p_grid)\n\n    # step function prior\n    prior = (p_grid >= 0.5).astype(int)\n\n    # posterior\n    post = likelihood * prior\n    \n    # normalise the posterior\n    post = post / np.sum(post)\n    \n    # plot\n    ax.plot(p_grid, post)\n    ax.scatter(p_grid, post)\n    ax.set_title(f\"{w} Water / {t} Trials\")\n    ax.set(xlabel=\"P\", ylabel=\"Posterior Probability\")\n\nfor ax in axs.flat:\n    ax.label_outer()\n\n\n\n\n\n\n\nSuppose there are two globes, one for Earth and one for Mars. The Earth globe is 70% covered in water. The Mars globe is 100% land. Further suppose that one of these globes—you don’t know which—was tossed in the air and produced a “land” observation. Assume that each globe was equally likely to be tossed. Show that the posterior probability that the globe was the Earth, conditional on seeing “land” (Pr(Earth|land)), is 0.23.\nAnswer:\n\n\\(P(land|Earth) = 1 - 0.7 = 0.3\\)\n\\(P(land|Mars) = 1\\)\n\\(P(Earth) = P(Mars) = 0.5\\)\n\nAs we want to know \\(P(Earth|land)\\), then:\n\\[\nP(Earth|land) = \\frac{P(land|Earth)~P(Earth)}{P(land)}\n\\]\nWe need to get \\(P(land)\\) first, which we can calculate in the following way:\n\\[\n\\begin{aligned}\nP(land) &= P(land|Earth)~P(Earth)+P(land|Mars)~P(Mars)\\\\\n        &= 0.3 * 0.5 + 1 * 0.5\\\\\n        &= 0.65\n\\end{aligned}\n\\]\nWe plug the number to the Bayes Theorem equation:\n\\[P(Earth|land) = \\frac{0.3*0.5}{0.65} = 0.23\\]\n\n\n\nSuppose you have a deck with only three cards. Each card has two sides, and each side is either black or white. One card has two black sides. The second card has one black and one white side. The third card has two white sides. Now suppose all three cards are placed in a bag and shuffled. Someone reaches into the bag and pulls out a card and places it flat on a table. A black side is shown facing up, but you don’t know the color of the side facing down. Show that the probability that the other side is also black is 2/3. Use the counting method (Section 2 of the chapter) to approach this problem. This means counting up the ways that each card could produce the observed data (a black side facing up on the table).\nAnswer:\n\n\n\nNow suppose there are four cards: B/B, B/W, W/W, and another B/B. Again suppose a card is drawn from the bag and a black side appears face up. Again calculate the probability that the other side is black.\nAnswer:\n\n\n\nImagine that black ink is heavy, and so cards with black sides are heavier than cards with white sides. As a result, it’s less likely that a card with black sides is pulled from the bag. So again assume there are three cards: B/B, B/W, and W/W. After experimenting a number of times, you conclude that for every way to pull the B/B card from the bag, there are 2 ways to pull the B/W card and 3 ways to pull the W/W card. Again suppose that a card is pulled and a black side appears face up. Show that the probability the other side is black is now 0.5. Use the counting method, as before.\nAnswer:\n\n\n\nAssume again the original card problem, with a single card showing a black side face up. Before looking at the other side, we draw another card from the bag and lay it face up on the table. The face that is shown on the new card is white. Show that the probability that the first card, the one showing a black side, has black on its other side is now 0.75. Use the counting method, if you can. Hint: Treat this like the sequence of globe tosses, counting all the ways to see each observation, for each possible first card.\nAnswer:\n\n\n\n\n\n\nSuppose there are two species of panda bear. Both are equally common in the wild and live in the same places. They look exactly alike and eat the same food, and there is yet no genetic assay capable of telling them apart. They differ however in their family sizes. Species A gives birth to twins 10% of the time, otherwise birthing a single infant. Species B births twins 20% of the time, otherwise birthing singleton infants. Assume these numbers are known with certainty, from many years of field research.\nNow suppose you are managing a captive panda breeding program. You have a new female panda of unknown species, and she has just given birth to twins. What is the probability that her next birth will also be twins?\nAnswer:\n\nAnalyticCode\n\n\nWhat we know from the question:\n\n\\(P(A) = P(B) = 0.5\\)\n\\(P(twin|A) = 0.1\\)\n\\(P(twin|B) = 0.2\\)\n\nWhat we can calculate:\n\n\\(P(twin) = P(twin|A) * P(A) + P(twin|B) * P(B) = 0.1 * 0.5 + 0.2 * 0.5 = 0.15\\)\n\\(P(A|twin) = P(twin|A) P(A) / P(twin) = 0.1 * 0.5 / 0.15 = 1/3\\)\n\\(P(B|twin) = 1 - P(A|twin) = 2/3\\)\n\nWhat we need to know \\(P(twin_2|twin_1)\\):\nWe can calculate probability of producing twin in each species, weighted by the posterior probability of being from either species A or B.\n\\(P(twin_2|twin_1)\\) = 1/10 * 1/3 + 2/10 * 2/3 = 1/30 + 4/30 = 1/6\n\n\n\np_twin_A = 0.1\np_twin_B = 0.2\n\n# first update: twin birth\nlikelihood_twins = np.array([p_twin_A, p_twin_B])\nprior = np.array([1, 1])\npost = prior * likelihood_twins\npost = post / post.sum()\n\n# another twin\npost[0] * p_twin_A + post[1] * p_twin_B\n\n0.16666666666666666\n\n\n\n\n\n\n\n\nRecall all the facts from the problem above. Now compute the probability that the panda we have is from species A, assuming we have observed only the first birth and that it was twins.\nAnswer:\nThis question is asking \\(P(A|twin)\\), which we have already answered: 1/3\n\n\n\nContinuing on from the previous problem, suppose the same panda mother has a second birth and that it is not twins, but a singleton infant. Compute the posterior probability that this panda is species A\nAnswer:\n\np_twin_A = 0.1\np_twin_B = 0.2\n\n# first update: twin birth\nlikelihood_twins = np.array([p_twin_A, p_twin_B])\nprior = np.array([1, 1])\npost = prior * likelihood_twins\npost = post / post.sum()\n\n# second update: singleton\nlikelihood_single = np.array([1 - p_twin_A, 1 - p_twin_B])\nprior = post \npost = prior * likelihood_single\npost = post / post.sum()\npost[0]\n\n0.36000000000000004\n\n\n\n\n\nA common boast of Bayesian statisticians is that Bayesian inference makes it easy to use all of the data, even if the data are of different types. So suppose now that a veterinarian comes along who has a new genetic test that she claims can identify the species of our mother panda. But the test, like all tests, is imperfect. This is the information you have about the test: • The probability it correctly identifies a species A panda is 0.8. • The probability it correctly identifies a species B panda is 0.65. The vet administers the test to your panda and tells you that the test is positive for species A. First ignore your previous information from the births and compute the posterior probability that your panda is species A. Then redo your calculation, now using the birth data as well.\nAnswer:\n\nAnalyticCode\n\n\nWhat we know:\n\nP(+A|A) = 0.8\nP(+A|B) = 1 - 0.65 = 0.35\n\nP(+A) = P(+A|A) P(A) + P(+A|B) P(B) = 0.8 * 0.5 + 0.35 * 0.5 = 0.4 + 0.175 = 0.575\nThen we need to know P(A|+A) = P(+A|A) P(A) / P(+) = 0.8 * 0.5 / 0.575 = 0.696\nFrom the birth data, we know: * P(A) = 0.36 * P(B) = 1 - P(A) = 0.64\nP(+A) = 0.8 * 0.36 + 0.35 * 0.64 = 0.512\nP(A|+) = 0.8 * 0.36 / 0.512 = 0.5625\n\n\n\nlikelihood_test = np.array([0.8, 0.35])\nprior = np.array([1, 1])\npost = prior * likelihood_test\npost = post / post.sum()\npost[0]\n\n0.6956521739130436\n\n\n\np_twin_A = 0.1\np_twin_B = 0.2\n\nlikelihood_twin_single = np.array([p_twin_A * (1 - p_twin_A), p_twin_B * (1 - p_twin_B)])\nprior = post\npost = prior * likelihood_twin_single\npost = post / post.sum()\npost[0]\n\n0.5625"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "",
    "text": "version 0.0.1 | Mikhael D. Manurung | 2022-10-26"
  },
  {
    "objectID": "index.html#this-is-my-learning-diary",
    "href": "index.html#this-is-my-learning-diary",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "This is my learning diary",
    "text": "This is my learning diary\nI always wanted to learn Bayesian Statistics and Python. So, why not learn both simultaneously? So here I attempt to translate the R code from the Statistical Rethinking 2 book into Python and PyMC (+Bambi too!).\nNote that this translation draws a lot from the PyMC resources by the PyMC developers! Why make another one, you may ask. Well, because the PyMC authors have not fully migrated their code to PyMC v4, which I will use for the entire book.\nI hope it is useful!"
  },
  {
    "objectID": "index.html#related-resources",
    "href": "index.html#related-resources",
    "title": "Statistical Rethinking 2 in PyMC",
    "section": "Related Resources",
    "text": "Related Resources\nStatistical Rethinking 2 is such a fantastic book that many has shared their ports or their solutions to the exercises. Here are the ones that I find particularly useful (note that I am biased toward R):\n\nSolutions to Statistical Rethinking 2 by Erik Kusch\nRichard McElreath’s personal website\nJeffrey Girard’s Blog\nJake Thompson’s solutions\nRohit Goswami’s solutions"
  }
]